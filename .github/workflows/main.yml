name: GHAction example

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  ci_step:
    name: Build, Test, and Deploy Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Define Docker Metadata
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/example
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}

      - name: Initialize QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: DockerHub Authentication
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Publish Docker Image
        id: build_docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/example:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/example:cache
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
      
      - name: Security Scan with Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta-dockerhub.outputs.tags }}
          sarif-file: security-report.sarif
          summary: true

      - name: Validate Vulnerabilities
        id: validate_vulnerabilities
        run: |
          vulnerabilities=$(jq '[.runs[].results[].level] | {"critical": (map(select(. == "error")) | length), "high": (map(select(. == "warning")) | length)}' security-report.sarif)
          critical=$(echo $vulnerabilities | jq '.critical')
          high=$(echo $vulnerabilities | jq '.high')
          
          if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
            echo "Found $critical critical and $high high vulnerabilities."
            exit 1
          else
            echo "No critical or high vulnerabilities found."
          fi
        shell: bash
      
      - name: Authenticate with GHCR
        if: ${{ steps.validate_vulnerabilities.outcome == 'success' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Push Image to GHCR
        if: ${{ steps.validate_vulnerabilities.outcome == 'success' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/myapp:latest
